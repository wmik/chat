generator client {
  provider     = "prisma-client"
  output       = "../app/generated/prisma"
  moduleFormat = "cjs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authorizations {
  token      String    @id
  type       String
  custom     Json?     @default("{}")
  expired_at DateTime
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model accounts {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  email_verified DateTime?
  role           String
  custom         Json?         @default("{}")
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  deleted_at     DateTime?
  memberships    memberships[]
  threads        threads[]
  sessions       sessions[]
}

model organizations {
  id          String        @id @default(uuid())
  name        String
  slug        String        @unique
  custom      Json?         @default("{}")
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  deleted_at  DateTime?
  memberships memberships[]
  threads     threads[]
  sessions    sessions[]
}

model memberships {
  account_id      String
  organization_id String
  role            String
  custom          Json?     @default("{}")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  account      accounts      @relation(fields: [account_id], references: [id], onDelete: Cascade)
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@id([account_id, organization_id])
}

model sessions {
  id              String    @id
  custom          Json?     @default("{}")
  account_id      String
  organization_id String
  expired_at      DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  account      accounts      @relation(fields: [account_id], references: [id], onDelete: Cascade)
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

model threads {
  id              String     @id @default(uuid())
  title           String?
  account_id      String
  organization_id String
  custom          Json?      @default("{}")
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  deleted_at      DateTime?
  messages        messages[]

  account      accounts      @relation(fields: [account_id], references: [id], onDelete: Cascade)
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

model messages {
  id         String    @id @default(uuid())
  author     String
  content    String
  reaction   String?
  thread_id  String
  custom     Json?     @default("{}")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  thread threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)
}
